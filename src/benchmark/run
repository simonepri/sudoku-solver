#!/usr/bin/env bash

RST='\033[0m'
BOLD='\e[1m'
RED='\033[00;31m'
GREEN='\033[00;32m'
CYAN='\033[00;36m'

usage() {
  printf "Usage: bench [options]\n"
  printf "  Options:\n"
  printf "    --help               Print usage\n"
  printf "    -n <integer>         Number of iteration to execute for each test\n"
  printf "    -m <regex>           Run only the tests whose name match the regex\n"
  printf "    -nm <regex>          Don't run the tests whose name match the regex\n"
  printf "    -np                  Skip parallel mode benchmark\n"
  printf "    -ns                  Skip sequential mode benchmark\n"
  printf "    -cf <integer>        Custom sequential cutoff for parallel mode\n"
  printf "    -nh                  Display time in ms instead of humanizing it\n"
}

displaytime() {
  T="$1"
  D="$((T/1000/60/60/24))"
  H="$((T/1000/60/60%24))"
  M="$((T/1000/60%60))"
  S="$((T/1000%60))"
  ms="$((T%1000))"
  [ "$D" -gt 0 ] && printf '%dd ' $D
  [ "$H" -gt 0 ] && printf '%dh ' $H
  [ "$M" -gt 0 ] && printf '%dm ' $M
  [ "$S" -gt 0 ] && printf '%ds ' $S
  printf '%dms' $ms
}

run_app() {
  java -jar build/libs/sudoku-solver-all-*.*.*.jar "$@"
}

run_one() {
  mode="$1"
  filepath="$2"
  iterations="$3"
  excluded="$4"
  included="$5"
  nothuman="$6"
  cutoff="$7"

  dirname=`basename "$(dirname "$filepath")"`
  filename=`basename "${filepath%.*}"`
  testname="$dirname$filename"

  if [[ ! $testname =~ $included || $testname =~ $excluded ]]; then
    return
  fi

  printf "Benchmark ${BOLD}$testname${RST} "

  if [ $mode = "parallel" ]; then
    args="-t";
    if [ "$cutoff" != "" ]; then
      args="$args -cf $cutoff";
    fi
  else
    args="-s -t";
  fi

  totrt=0
  totrtsq=0
  minrt=-1
  maxrt=-1
  for ((n = 0; n < iterations; n++)); do
    if [ $STOP -gt 0 ]; then break; fi
    runtime=`run_app $args $filepath`
    totrt=$((totrt + runtime))
    totrtsq=$((totrtsq + runtime * runtime))
    if [ "$maxrt" -eq -1 ] || [ "$runtime" -gt "$maxrt" ]; then maxrt="$runtime"; fi
    if [ "$minrt" -eq -1 ] || [ "$runtime" -lt "$minrt" ]; then minrt="$runtime"; fi
  done
  if [ $STOP -gt 0 ]; then
    printf "${RED}STOPPED${RST}\n"
  else
    stdev=`echo "scale=16; sqrt($totrtsq/$iterations - ($totrt/$iterations)^2)" | bc`
    stdev=`echo "scale=0; $stdev/1" | bc`
    avgrt="$((totrt / iterations))"

    if [ $nothuman -eq 0 ]; then
      avgrt=`displaytime "$avgrt"`
      minrt=`displaytime "$minrt"`
      maxrt=`displaytime "$maxrt"`
      stdev=`displaytime "$stdev"`
    fi

    printf "${GREEN}OK${RST} ${CYAN}(avg: $avgrt | dev: ${stdev} | min: $minrt | max: $maxrt)${RST}\n"
  fi
}

run_all() {
  mode="$1"
  iterations="$2"
  excluded="$3"
  included="$4"
  nothuman="$5"
  cutoff="$6"

  trap "STOP=1" SIGINT
  stty -echoctl
  STOP=0
  printf "${BOLD}Running benchmark tests in ${GREEN}$mode${RST}${BOLD} mode${RST}${BOLD} with ${CYAN}${iterations}${RST}${BOLD} iterations${RST}\n"
  for dirpath in src/benchmark/boards/* ; do
    dirname=`basename "${dirpath}"`
    for filepath in `ls $dirpath/*.txt | sort -r`; do
      if [ $STOP -gt 0 ]; then STOP=0; continue; fi
      run_one "$mode" "$filepath" "$iterations" "$excluded" "$included" "$nothuman" "$cutoff"
      if [ $STOP -gt 0 ]; then STOP=0; continue; fi
    done
  done
  STOP=0
}

trap "exit" SIGHUP

run() {
  # Parse options
  iterations=1
  excluded="^$"
  included="^.*$"
  notpar=0
  notseq=0
  nothuman=0
  cutoff=""
  while [[ $1 != "" ]]; do
    case "$1" in
      --help ) usage; exit 0;;
      -n ) iterations=$2; shift 2;;
      -nm ) excluded=$2; shift 2;;
      -m ) included=$2; shift 2;;
      -np ) notpar=1; shift 1;;
      -ns ) notseq=1; shift 1;;
      -cf ) cutoff=$2; shift 2;;
      -nh ) nothuman=1; shift 1;;
      * ) shift 1;;
    esac
  done
  if [ "$notpar" -eq 1 ] && [ "$notseq" -eq 1 ]; then
    exit 0
  fi
  if [[ ! $iterations =~ ^[1-9][0-9]*$ ]]; then
    iterations=1;
  fi
  if [[ ! $cutoff =~ ^[1-9][0-9]*$ ]]; then
    cutoff="";
  fi

  # Build the project
  if ! ls build/libs/sudoku-solver-all-*.*.*.jar > /dev/null 2>&1; then
    ./gradlew assemble --quiet --no-daemon
  fi

  # Print cpu info
  out=`uname -s`
  case "${out}" in
    Linux* )     cpu="$(nproc) x $(lscpu | grep 'Model name' | cut -f 2 -d ":" | awk '{$1=$1}1')";;
    Darwin* )    cpu="$(gnproc) x $(sysctl -n machdep.cpu.brand_string)";;
    * )          cpu="unknown CPU";;
  esac
  printf "${BOLD}Running benchmark tests on ${GREEN}$out${RST}${BOLD} with ${CYAN}$cpu${RST}\n"


  if [ $notseq -eq 0 ]; then
    # Sequential tests
    run_all "sequential" "$iterations" "$excluded" "$included" "$nothuman" ""
  fi

  if [ $notpar -eq 0 ]; then
    # Parallel tests
    run_all "parallel" "$iterations" "$excluded" "$included" "$nothuman" "$cutoff"
  fi
}

run "$@"
